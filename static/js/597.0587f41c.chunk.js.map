{"version":3,"file":"static/js/597.0587f41c.chunk.js","mappings":"2LAEe,SAASA,IACpB,IAAMC,GAAQC,EAAAA,EAAAA,QAAyB,MACjCC,GAASD,EAAAA,EAAAA,UAwBf,OAtBAE,EAAAA,EAAAA,YAAU,WAiBN,OAhBAC,UAAUC,aAAaC,gBAAgB,CACnCC,OAAO,EAAMP,OAAO,IACrBQ,MAAK,SAAAC,GAEJ,GADAP,EAAOQ,QAAUD,EAAME,YACD,OAAlBX,EAAMU,QAKN,MADAE,MAAM,iBACA,IAAIC,MAAM,iBAJhBb,EAAMU,QAAQI,UAAYL,EAC1BT,EAAMU,QAAQK,OAAOP,MAAK,SAAAQ,GAAY,IAAE,SAAAC,GAAY,GAK3D,IAAEC,OAAM,SAAAD,GAEL,MADAL,MAAMK,GACA,IAAIJ,MAAMI,EACnB,IAEM,WAAO,IAAD,EACT,UAAAf,EAAOQ,eAAP,SAAgBS,SAAQ,SAAAC,GAAC,OAAIA,EAAEC,MAAN,GAC5B,CACJ,GAAE,KAGC,kBACIC,MAAO,CAAEC,OAAQ,MAAOC,SAAU,QAClCC,IAAKzB,GAEhB,C","sources":["components/Products/use-display-media/index.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nexport default function UseDisPlayMedia () {\n    const video = useRef<HTMLVideoElement>(null);\n    const tracks = useRef<MediaStreamTrack[]>();\n\n    useEffect(() => {\n        navigator.mediaDevices.getDisplayMedia({\n            audio: true, video: true\n        }).then(value => {\n            tracks.current = value.getTracks();\n            if (video.current !== null) {\n                video.current.srcObject = value;\n                video.current.play().then(result => {}, reason => {});\n            } else {\n                alert(\"video is null\");\n                throw new Error(\"video is null\");\n            }\n        }).catch(reason => {\n            alert(reason);\n            throw new Error(reason);\n        });\n\n        return () => {\n            tracks.current?.forEach(t => t.stop());\n        };\n    }, []);\n\n    return (\n        <video\n            style={{ zIndex: \"100\", maxWidth: \"100%\" }}\n            ref={video} />\n    );\n}\n\n// export type AnyFunc = (...arg: any[]) => any;\n\n// function deboucing (callback: (...arg: any[]) => any, interval: number) {\n//     let timer: NodeJS.Timeout | null = null;\n//     return () => {\n//         if (timer !== null) clearTimeout(timer);\n//         timer = setTimeout(callback, interval);\n//     };\n// }\n\n// function throtting (callback: AnyFunc, interval: number, delay: number) {\n//     let timer: NodeJS.Timeout | null = null;\n//     let startTime = Date.now();\n\n//     return (...args: any[]) => {\n//         const waitTime = Date.now() - startTime;\n//         if (timer !== null) clearTimeout(timer);\n//         if (waitTime >= interval) {\n//             callback.apply(args);\n//             startTime = Date.now();\n//         } else {\n//             timer = setTimeout(callback, delay);\n//         }\n//     };\n// }\n"],"names":["UseDisPlayMedia","video","useRef","tracks","useEffect","navigator","mediaDevices","getDisplayMedia","audio","then","value","current","getTracks","alert","Error","srcObject","play","result","reason","catch","forEach","t","stop","style","zIndex","maxWidth","ref"],"sourceRoot":""}